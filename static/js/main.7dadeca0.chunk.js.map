{"version":3,"sources":["images/Loading_Spinner.gif","images/doh.gif","images/helmet.png","images/ffnlogo2.gif","images/headerfootball.png","App.js","index.js"],"names":["module","exports","details","leagueTypes","flexPositions","allPositions","rosterDetailsStart","type","QB","RB","WR","TE","FLEX","DEF","K","Total","Bench","addedPlayerDetailsStart","currentRosterStart","name","App","useState","fullPlayerList","setFullPlayerList","showRosterSelect","setShowRosterSelect","filteredPlayerList","setFilteredPlayerList","search","query","noResults","setNoResults","currentRoster","setCurrentRoster","rosterDetails","setRosterDetails","addedPlayerDetails","setAddedPlayerDetails","loading","setLoading","hasError","setHasError","startPage","setStartPage","showMenu","setShowMenu","currentSelected","setCurrentSelected","showForm","autoShow","sendNumber","verifyCode","sendSuccess","verified","initialSend","SMSDetails","setSMSDetails","rostersRetrieved","findRoster","setFindRoster","showResetConfirm","setShowResetConfirm","showAbout","setShowAbout","showStartOptions","setShowStartOptions","useEffect","fetch","then","res","a","json","playerList","sort","playerA","playerB","standardRanking","catch","e","handleInputChange","newList","filter","player","this","count","displayName","toLowerCase","includes","currentTarget","value","length","startOptionsModal","Modal","size","closeIcon","open","onOpen","onClose","trigger","className","id","Header","Content","style","onClick","setTimeout","every","pos","parseInt","handleCode","action","SMSForm","FormData","append","JSON","stringify","url","method","body","fetchResults","resultsJson","console","log","warn","renderErrorMessage","src","doh","map","modifyRoster","getRostersFromServer","rostersToAdd","parse","roster","fields","players","parameters","currentPlayer","newRoster","newDetails","push","rankingType","forEach","position","renderCardContent","contentType","team","renderPlayerCard","location","onMouseEnter","window","screen","width","backgroundColor","onMouseLeave","profileImg","renderLoadingGraphic","LoadingSpinner","Description","Actions","systemId","onChange","placeholder","Dropdown","text","icon","Menu","scrolling","Item","key","index","item","detail","leagueType","totalPlayers","reduce","total","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7dadeca0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Loading_Spinner.79afee20.gif\";","module.exports = __webpack_public_path__ + \"static/media/doh.2d6b300a.gif\";","module.exports = __webpack_public_path__ + \"static/media/helmet.dd87be7f.png\";","module.exports = __webpack_public_path__ + \"static/media/ffnlogo2.c3081174.gif\";","module.exports = __webpack_public_path__ + \"static/media/headerfootball.06a304c6.png\";","import React, { useState, useEffect } from 'react'\r\nimport LoadingSpinner from './images/Loading_Spinner.gif'\r\nimport helmet from './images/helmet.png'\r\nimport doh from './images/doh.gif'\r\nimport ffnLogo from './images/ffnlogo2.gif'\r\nimport { Modal, Dropdown } from 'semantic-ui-react'\r\nimport { render } from 'react-dom'\r\nimport football from './images/headerfootball.png'\r\n\r\nconst details = ['type', 'name', 'RB', 'QB', 'WR', 'TE', 'FLEX', 'K', 'DEF', 'Total', 'Bench']\r\nconst leagueTypes = [\"Standard\", \"PPR\"]\r\nconst flexPositions = [\"WR\", \"TE\", \"RB\"]\r\nconst allPositions = ['QB', 'WR', 'RB', 'TE', 'FLEX', 'K', 'DEF', 'Bench']\r\nconst specialDetails = ['type', 'Total', 'Bench']\r\nconst rosterDetailsStart = {type: 'Standard', QB: 1, RB: 2, WR: 3, TE: 1, FLEX: 2, DEF: 1, K: 1, Total: 11, Bench: 1}\r\nconst addedPlayerDetailsStart = {QB: 0, RB: 0, WR: 0, TE: 0, FLEX: 0, DEF: 0, K: 0, Total: 0, Bench: 0}\r\nconst currentRosterStart = {RB: [], QB: [], WR: [], TE: [], FLEX: [], K: [], DEF: [], Total: [], Bench: [], name:\"NewLineup1\"}\r\n\r\nfunction App() {\r\n\r\n    const [fullPlayerList, setFullPlayerList] = useState([])\r\n    const [showRosterSelect, setShowRosterSelect] = useState(false)\r\n    const [filteredPlayerList, setFilteredPlayerList] = useState([])\r\n    const [noResults, setNoResults] = useState({search: false, query: ''})\r\n    const [currentRoster, setCurrentRoster] = useState({RB: [], QB: [], WR: [], TE: [], FLEX: [], K: [], DEF: [], Total: [], Bench: [], name:\"NewLineup1\"})\r\n    const [rosterDetails, setRosterDetails] = useState({type: 'Standard', QB: 1, RB: 2, WR: 3, TE: 1, FLEX: 2, DEF: 1, K: 1, Total: 11, Bench: 1})\r\n    const [addedPlayerDetails, setAddedPlayerDetails] = useState({QB: 0, RB: 0, WR: 0, TE: 0, FLEX: 0, DEF: 0, K: 0, Total: 0, Bench: 0})\r\n    const [loading, setLoading] = useState(false)\r\n    const [hasError, setHasError] = useState(false)\r\n    const [startPage, setStartPage] = useState(true)\r\n    const [showMenu, setShowMenu] = useState(false)\r\n    const [currentSelected, setCurrentSelected] = useState('')\r\n    const [SMSDetails, setSMSDetails] = useState({showForm: false, autoShow: true, sendNumber: '', verifyCode:'', sendSuccess:false, verified:false, initialSend:false})\r\n    const [findRoster, setFindRoster] = useState({showForm: false,  sendNumber:'', rostersRetrieved:[], sendSuccess: false})\r\n    const [showResetConfirm, setShowResetConfirm] = useState(false)\r\n    const [showAbout, setShowAbout] = useState(false)\r\n    const [showStartOptions, setShowStartOptions] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        fetch('https://fflo-server.herokuapp.com/players/loadInitial').then(\r\n            async(res) => {\r\n                let playerList = await res.json()\r\n\r\n                playerList.sort((playerA, playerB) => {\r\n                    return playerA.standardRanking - playerB.standardRanking\r\n                })\r\n\r\n                setFullPlayerList(playerList)\r\n                setLoading(false)\r\n            }\r\n        ).catch(e => {\r\n            setHasError(true)\r\n            setLoading(false)\r\n        })\r\n\r\n    }, [])\r\n\r\n    const handleInputChange = e => {\r\n        setNoResults({...noResults, search: false})\r\n        let newList = fullPlayerList.filter(function(player) {\r\n            if (this.count < 10 && player.displayName.toLowerCase().includes\r\n                (e.currentTarget.value.toLowerCase()))\r\n                {this.count ++\r\n                return true}\r\n        }, {count: 0})\r\n        if (newList.length === 0) {\r\n            setNoResults({...noResults, search: true, query: e.currentTarget.value})\r\n        }\r\n        setFilteredPlayerList(newList)\r\n    }\r\n    \r\n    const renderInputForm = () => {\r\n        return (\r\n            <div className = \"ui form\">\r\n                <input className = \"ui input\"\r\n                    placeholder=\"Begin typing a player name\"\r\n                    type=\"text\"\r\n                    onChange={handleInputChange}\r\n                >\r\n                </input>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const showStartPage = () => {\r\n        return (\r\n            <div className=\"startMenu\">\r\n                <div>\r\n                    <h1>Never miss a fantasy football lineup again!</h1>\r\n                </div>\r\n                <div id=\"startFact\"\r\n                    style={{\"backgroundColor\": \"whitesmoke\", \"border\": \"1px solid gainsboro\",\r\n                    \"padding-top\": \"1.5vh\", \"padding-bottom\": \"1.5vh\"\r\n                    }}    \r\n                >\r\n                    <i className=\"clock outline icon big\"></i>\r\n                    <p>Lineup Reminder texts you weekly curated lineup recommendations\r\n                    </p>\r\n                </div>\r\n                <div id=\"startFact\">\r\n                    <p>Create and update rosters easily. We'll message you every Thursday at 5PM with start/sit suggestions.\r\n                    </p>\r\n                    <i className=\"mail icon big\"></i>\r\n                </div>\r\n                <div id=\"startFact\"\r\n                    style={{\"backgroundColor\": \"whitesmoke\", \"border\": \"1px solid gainsboro\",\r\n                    \"padding-top\": \"1.5vh\", \"padding-bottom\": \"1.5vh\"}}\r\n                >\r\n                    <i className=\"line graph icon big\"></i>\r\n                    <p>Rankings are updated every 48 hours by guys who spend way too long looking at sports\r\n                    </p>\r\n                </div>\r\n                <div id=\"startFact\">\r\n                    <p>Totally free to use and opt out anytime. \r\n                    </p>\r\n                    <i className=\"undo icon big\"></i>\r\n                </div>\r\n                    \r\n                <div\r\n                    style={{\"border-top\": \"1px solid gainsboro\", \"padding-top\": \"2vh\"}}    \r\n                >\r\n                    {startOptionsModal()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const startOptionsModal = () => {\r\n        return (\r\n            <Modal\r\n                size=\"tiny\"\r\n                closeIcon\r\n                open={showStartOptions}\r\n                onOpen={() => setShowStartOptions(true)}\r\n                onClose={() => setShowStartOptions(false)}\r\n                trigger={ <button\r\n                    className=\"massive fluid ui button\"\r\n                    id=\"startButton\"\r\n                    >Let's get started!</button>}\r\n            >\r\n                <Modal.Header>\r\n                    <h1>Welcome!</h1>\r\n                </Modal.Header>\r\n                <Modal.Content>\r\n                    <div className=\"startOptionButtons\">\r\n                    <div>\r\n                        <button\r\n                            className=\"ui fluid large button\"\r\n                            style={{\"backgroundColor\": \"darkgreen\", \"color\": \"white\"}}\r\n                            onClick={() => {\r\n                                setStartPage(false)\r\n                                setTimeout(() => setShowAbout(true), 3000)\r\n                            }}\r\n                        >\r\n                            Create New Lineup\r\n                            </button>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            className=\"ui fluid large button\"\r\n                            style={{\"backgroundColor\": \"darkgreen\", \"color\": \"white\"}}\r\n                            onClick={() => setFindRoster({...findRoster, showForm: true})}\r\n                        >Edit Existing Lineup</button>\r\n                    </div>\r\n                    </div>\r\n                </Modal.Content>\r\n            </Modal>\r\n        )\r\n    }\r\n    /**\r\n     * <div className=\"startMenuButtons\">\r\n                    <div>\r\n                        <button\r\n                            className=\"ui fluid large button\"\r\n                            style={{\"backgroundColor\": \"darkgreen\", \"color\": \"white\"}}\r\n                            onClick={() => {\r\n                                setStartPage(false)\r\n                                setTimeout(() => setShowAbout(true), 3000)\r\n                            }}\r\n                        >\r\n                            New Lineup\r\n                            </button>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            className=\"ui fluid large button\"\r\n                            style={{\"backgroundColor\": \"darkgreen\", \"color\": \"white\"}}\r\n                            onClick={() => setFindRoster({...findRoster, showForm: true})}\r\n                        >Edit Existing</button>\r\n                    </div>\r\n                </div>\r\n     */\r\n    //renderSMS sendform automatically the first time that user fills out lineup\r\n    useEffect(() => {\r\n\r\n        if (allPositions.every(pos => parseInt(rosterDetails[`${pos}`]) === addedPlayerDetails[`${pos}`]) \r\n            && findRoster.rostersRetrieved \r\n            && findRoster.rostersRetrieved.length === 0) {\r\n\r\n            if (SMSDetails.autoShow) {\r\n                setSMSDetails({...SMSDetails, showForm: true, autoShow: false})\r\n            } \r\n        }\r\n\r\n    })\r\n\r\n    const handleCode = async (e, action) => {\r\n        \r\n        try {\r\n            let SMSForm = new FormData()\r\n            SMSForm.append('number', SMSDetails.sendNumber)\r\n            \r\n            if (action===\"verify\") {\r\n                SMSForm.append('code', SMSDetails.verifyCode)\r\n            } else {\r\n                SMSForm.append('roster', JSON.stringify(currentRoster))\r\n                SMSForm.append('parameters', JSON.stringify(rosterDetails))\r\n            }\r\n\r\n            let url = action === 'verify' ? 'http://127.0.0.1:8000/players/verifyCode' :\r\n            'https://fflo-server.herokuapp.com/players/generateCode'\r\n\r\n            let fetchResults = await fetch(url, {\r\n                method: 'POST',\r\n                body: SMSForm\r\n            })\r\n            let resultsJson = await fetchResults.json()\r\n            console.log(resultsJson)\r\n            if (resultsJson) {\r\n                if (resultsJson === \"send success\") {\r\n                    setSMSDetails({...SMSDetails, sendSuccess: true, initialSend: true})\r\n                } else if (resultsJson === \"verified\") {\r\n                    setSMSDetails({...SMSDetails, verified: true, initialSend: true})\r\n                } else if (resultsJson === \"error\") {\r\n                    setHasError(true)\r\n                }\r\n            }\r\n            \r\n        } catch(e) {\r\n            setHasError(true)\r\n            console.warn(e)\r\n        }\r\n\r\n    }\r\n\r\n    const renderErrorMessage = () => {\r\n        return (\r\n            <div style={{\"textAlign\": \"center\"}}>\r\n                <h2>Oops! Something went wrong</h2>\r\n                <div className=\"ui image fluid\"\r\n                    style={{\"padding-right\": \"5vh\", \"padding-left\": \"5vh\"}}    \r\n                >\r\n                    <img src={doh}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderAboutModal = () => {\r\n\r\n        return (\r\n            <Modal\r\n                size=\"tiny\"\r\n                closeIcon\r\n                open={showAbout}\r\n                onOpen={() => setShowAbout(true)}\r\n                onClose={() => setShowAbout(false)}\r\n                trigger={<p\r\n                    onClick={() => setShowMenu(!showMenu)}\r\n                ><i className=\"icon football ball\"></i>About</p>}\r\n            >\r\n                <Modal.Header\r\n                    style={{\"backgroundColor\": \"darkgreen\", \"color\": \"white\"}}>\r\n                    <h2>Here's the rundown...</h2>\r\n                </Modal.Header>\r\n                <Modal.Content>\r\n                    <Modal.Description\r\n                    id=\"aboutOptions\">\r\n                        <div><p>Edit roster parameters with <span style={{\"color\": \"gray\"}}><i className=\"setting icon\"></i>Settings</span> (We've added some presets to start)\r\n                        </p></div>\r\n                        <div><p>Once all your added players are added, a <button className=\"ui small button positive\">Set up reminder!</button> button will appear.</p></div>\r\n                        <div><p>Add your phone number and confirm the 6 digit code we send</p></div>\r\n                        <div><p>Your roster is now saved! Look out for a text Thursdays at 5PM with lineup suggestions</p></div>\r\n                        <div><p>Opt out anytime by clicking <button className=\"ui small button negative\">Delete Lineup</button></p></div>\r\n                    </Modal.Description>\r\n                </Modal.Content>\r\n            </Modal>\r\n        )\r\n\r\n\r\n    }\r\n    const renderSMSFormContent = () => {\r\n        \r\n        if (!SMSDetails.initialSend) {\r\n            return (\r\n                <form className=\"ui form\">\r\n                    <p>Please enter your phone number below</p>\r\n                    <input \r\n                        className=\"ui input\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter number without spaces e.g. ##########\"\r\n                        onChange={(e) => {\r\n                            setSMSDetails({...SMSDetails, sendNumber: e.currentTarget.value})\r\n                        }}\r\n                    ></input>\r\n                </form>\r\n            ) \r\n        } else if (SMSDetails.sendSuccess && !SMSDetails.verified) {\r\n            return (\r\n                <form className=\"ui form\">\r\n                    <i className=\"key icon huge\"></i>\r\n                    <p>Looks like you're new - Welcome!</p>\r\n                    <p>We just sent a 6-digit code to for security purposes</p>\r\n                    <input\r\n                        className=\"ui input\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter code here\"\r\n                        onChange={(e) => {\r\n                            setSMSDetails({...SMSDetails, verifyCode: e.currentTarget.value})\r\n                        }}\r\n                        ></input>\r\n                </form>\r\n            )\r\n        } else if (SMSDetails.verified) {\r\n            return (\r\n                <form className=\"ui form\">\r\n                    <i className=\"check circle icon green massive\"></i>\r\n                    <p>We just sent a confirmation of your current lineup.\r\n                        Look out for a follow-up this Thursday at 5PM</p>\r\n                </form>\r\n            )}\r\n    }\r\n\r\n    const renderLookUpFormContent = () => {\r\n\r\n        if (findRoster.rostersRetrieved && findRoster.rostersRetrieved.length > 0) {\r\n            return (\r\n                <div id=\"existingRosterList\">\r\n                    <h3>Please choose a roster to edit:</h3>\r\n                    {findRoster.rostersRetrieved.map(roster => {\r\n                        return (\r\n                            <button className=\"ui button primary fluid large\"\r\n                                onClick={() => {\r\n                                    setRosterDetails(JSON.parse(roster.parameters))\r\n                                    let players = fullPlayerList.filter(player => roster.players.includes(player.systemId))\r\n                                    setCurrentRoster({...currentRoster, Total: players, name: roster.name})\r\n                                    setStartPage(false)\r\n                                    setFindRoster({...findRoster, showForm: false})\r\n                                }}\r\n                            >\r\n                                {roster.name}\r\n                            </button>\r\n                        )\r\n                    })}\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <form className=\"ui form\">\r\n                    <p>Please enter your number below and we'll find your rosters</p>\r\n                    <input\r\n                        style={{\"fontSize\": \"1.15rem\"}}\r\n                        type=\"text\"\r\n                        onChange={e => setFindRoster({findRoster, sendNumber: e.currentTarget.value})}\r\n                    >\r\n                    </input>\r\n                </form>\r\n            )\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        currentRoster.Total.map(player => modifyRoster(player, \"add\"))\r\n    }, [findRoster.showForm])\r\n        \r\n        const getRostersFromServer = async (e) => {\r\n        \r\n            setLoading(true)\r\n\r\n            try {\r\n                let SMSForm = new FormData()\r\n                SMSForm.append('number', findRoster.sendNumber)\r\n    \r\n                let fetchResults = await fetch(\"https://fflo-server.herokuapp.com/players/getRosters\", {\r\n                    method: 'POST',\r\n                    body: SMSForm\r\n                })\r\n                \r\n                let resultsJson = await fetchResults.json()\r\n    \r\n                if (resultsJson == \"error\") {\r\n                    throw \"invalid number\"\r\n                }\r\n\r\n                let rostersToAdd = JSON.parse(resultsJson).map(roster => {\r\n                        return {name: roster.fields.name, players: roster.fields.players, parameters: roster.fields.parameters}})\r\n                setFindRoster({...findRoster, rostersRetrieved: rostersToAdd})\r\n                setLoading(false)\r\n\r\n            } catch(e) {\r\n                setHasError(true)\r\n                setLoading(false)\r\n                console.warn(e)\r\n            }\r\n\r\n    }\r\n\r\n    const renderSMSForm = () => {\r\n\r\n        return (\r\n            <Modal\r\n                closeIcon\r\n                onClose={() => setSMSDetails({...SMSDetails, showForm: false})}\r\n                onOpen={() => setSMSDetails({...SMSDetails, showForm: true})}\r\n                open={SMSDetails.showForm}\r\n                trigger={<button className=\"ui button huge fluid positive\">Set up reminder!</button>}\r\n                size=\"tiny\"\r\n            >\r\n                <Modal.Header>\r\n                    {SMSDetails.verified ? <h2>Good To Go!</h2> : <h2>Set Up Text Reminder</h2>}\r\n                </Modal.Header>\r\n                <Modal.Content>\r\n                        <Modal.Description>\r\n                            {renderSMSFormContent()}\r\n                        </Modal.Description>\r\n                        <Modal.Actions\r\n                        style={{\"display\": SMSDetails.verified ? \"none\" : \"block\"}}>\r\n                        <button className=\"ui large button fluid positive\"\r\n                            onClick={(e) => {\r\n                                !SMSDetails.initialSend ? handleCode(e) : handleCode(e, 'verify')\r\n                            }}\r\n                        >Send</button>            \r\n                        </Modal.Actions>    \r\n                </Modal.Content>\r\n            </Modal>)\r\n\r\n    }\r\n\r\n    const renderLookupForm = () => {\r\n        return (\r\n            <Modal\r\n                closeIcon\r\n                size=\"tiny\"\r\n                open={findRoster.showForm}\r\n                onClose={() => {setFindRoster({...findRoster, showForm: false})\r\n                    setHasError(false)\r\n                }}\r\n                onOpen={() => setFindRoster({...findRoster, showForm: true})}\r\n            >\r\n                <Modal.Header>\r\n                    {!findRoster.rostersRetrieved || findRoster.rostersRetrieved.length == 0 ? \r\n                    <span>Find Existing Rosters</span> : <span>Success!<i className=\"check circle icon green\"></i></span>}\r\n                </Modal.Header>\r\n                <Modal.Content>\r\n                    <Modal.Description>\r\n                    {loading ? renderLoadingGraphic() : hasError ? renderErrorMessage() : renderLookUpFormContent()}\r\n                    </Modal.Description>\r\n                    <Modal.Actions\r\n                        style={{\"display\": (!findRoster.rostersRetrieved || findRoster.rostersRetrieved.length == 0) && !hasError ? \"block\" : \"none\"}}\r\n                    >\r\n                        <button className=\"ui large button positive fluid\"\r\n                            onClick={e => getRostersFromServer(e)}\r\n                        >Send\r\n                        </button>\r\n                    </Modal.Actions>\r\n                </Modal.Content>\r\n\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    const renderRosterSelect = () => {\r\n\r\n        return (\r\n            <Modal\r\n              onClose={() => setShowRosterSelect(false)}\r\n              onOpen={() => setShowRosterSelect(true)}\r\n              open={showRosterSelect}\r\n              trigger={<p id=\"parametersChange\">Settings<i className=\"setting icon\"></i></p>}\r\n              size=\"tiny\"\r\n              closeIcon\r\n              //trigger={<Button primary small>Edit</Button>}\r\n            >\r\n              <Modal.Header>Roster Details</Modal.Header>\r\n              <Modal.Content>\r\n                <Modal.Description>\r\n                    <div className=\"ui form two column grid\">\r\n                        {details.filter(item => item !== \"Total\").map(detail => {\r\n                        if (detail === \"type\") {\r\n                            return (\r\n                                <div className=\"row\">\r\n                                    <div className=\"column four wide\">\r\n                                        {detail}\r\n                                    </div>\r\n                                    <div className=\"column twelve wide\">\r\n                                    {leagueTypes.map(leagueType => {\r\n                                        return (\r\n                                            <button className=\"ui button small blue\"\r\n                                            style={{\"backgroundColor\": leagueType === rosterDetails.type ? \"#21ba45\" : \"\" }}\r\n                                            onClick = {e => {\r\n                                                let newDetails = {...rosterDetails, type: leagueType}\r\n                                                setRosterDetails(newDetails)}\r\n                                            }>{leagueType}</button>\r\n                                        )\r\n                                    })}\r\n                                    </div>\r\n                                </div> )\r\n                        } \r\n                        return (\r\n                            <div className=\"row\">\r\n                                <div className=\"column four wide\">\r\n                                    {detail}\r\n                                </div>\r\n                                <div className=\"column twelve wide\">\r\n                                    <input\r\n                                        style={{\"fontSize\": \"1.15rem\"}}\r\n                                        type=\"text\"\r\n                                        value = {detail === \"name\" ? currentRoster.name : rosterDetails[`${detail}`]}\r\n                                        onChange={(e) => {\r\n                                            let newDetails = detail === \"name\" ? {...currentRoster, name: e.currentTarget.value} :\r\n                                            {...rosterDetails, [detail]: e.currentTarget.value}\r\n                                            detail === \"name\" ? setCurrentRoster(newDetails) : setRosterDetails(newDetails)\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    </div>\r\n                </Modal.Description>\r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <button className=\"ui button large fluid positive\" \r\n                    onClick={() => {\r\n                        let totalPlayers = allPositions.reduce((total, pos) => { return total + parseInt(rosterDetails[`${pos}`])}, 0)\r\n                        setRosterDetails({...rosterDetails, Total: totalPlayers})\r\n                        setShowRosterSelect(false)}}\r\n                        >\r\n                  Save Details\r\n                </button>\r\n              </Modal.Actions>\r\n            </Modal>\r\n          )\r\n\r\n\r\n    }\r\n\r\n    const renderFilter = () => {\r\n        return (\r\n            <Dropdown\r\n                text=\"Filter\"\r\n                icon=\"filter\"\r\n                className=\"icon\"\r\n            >\r\n                <Dropdown.Menu>\r\n                    <Dropdown.Menu scrolling>\r\n                        {allPositions.map((pos) => {\r\n                            if (pos !== \"Bench\") {\r\n                                return (\r\n                                    <Dropdown.Item\r\n                                        key={pos}\r\n                                        text={pos}\r\n                                        onClick={() => {\r\n                                            setLoading(true)\r\n                                            if (pos === \"FLEX\") {\r\n                                                setFilteredPlayerList(fullPlayerList.filter((player) => flexPositions.includes(player.position)).filter((player, index) => index < 100))\r\n                                            } else {\r\n                                                setFilteredPlayerList(fullPlayerList.filter((player) => player.position === pos).filter((player, index) => index < 100))\r\n                                            }\r\n                                            setLoading(false)\r\n                                        }}\r\n                                />\r\n                                )\r\n                            }\r\n                        })}\r\n                    </Dropdown.Menu>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        )\r\n\r\n    }\r\n    const modifyRoster = (currentPlayer, action) => {\r\n\r\n        //recalculating each time\r\n        //total is the only sublist that gets kept\r\n        let newRoster = {...currentRoster, RB: [], QB: [], WR: [], TE: [], FLEX: [], K: [], DEF: [], Bench: []}\r\n        let newDetails = {QB: 0, RB: 0, WR: 0, TE: 0, FLEX: 0, DEF: 0, K: 0, Total: 0, Bench: 0}\r\n        \r\n        console.log(newRoster.Total)\r\n        console.log(rosterDetails.Total)\r\n\r\n        if (action === \"add\") {\r\n            if (!newRoster.Total.includes(currentPlayer) && newRoster.Total.length <= rosterDetails.Total - 1) {\r\n                newRoster.Total.push(currentPlayer)\r\n            }\r\n        } else {\r\n            newRoster.Total = newRoster.Total.filter(player => player !== currentPlayer)\r\n        }    \r\n        \r\n        let rankingType = rosterDetails.type === \"Standard\" ? \"standardRanking\" : \"pprRanking\"\r\n        //sort players so highest ranked automatically get sent to starting positions\r\n        newRoster.Total.sort((playerA, playerB) => {return playerA[`${rankingType}`] - playerB[`${rankingType}`]} )\r\n\r\n        newRoster.Total.forEach(player => {\r\n\r\n            if (newDetails[`${player.position}`] >= rosterDetails[`${player.position}`]) {\r\n\r\n                if (flexPositions.includes(player.position) && newDetails.FLEX < rosterDetails.FLEX){\r\n                    newRoster.FLEX.push(player)\r\n                    newDetails.FLEX++\r\n                } else {\r\n                    newRoster.Bench.push(player)\r\n                    newDetails.Bench++\r\n                }\r\n            } else {\r\n                newRoster[`${player.position}`].push(player)\r\n                newDetails[`${player.position}`]++\r\n            }\r\n                newDetails.Total++\r\n            \r\n        })\r\n\r\n        setCurrentRoster(newRoster)\r\n        setAddedPlayerDetails(newDetails)\r\n\r\n    }\r\n\r\n    const renderCardContent = (player, contentType) => {\r\n\r\n        if (currentRoster.Total.length >= rosterDetails.Total && player.id === currentSelected) {\r\n            return contentType === \"text\" ? <div id=\"addedGraphic\">Roster already full</div> : \"lightcoral\"\r\n        } else if (player.id === currentSelected) {\r\n            return contentType === \"text\" ? <div id=\"addedGraphic\">Added to roster!</div> : \"lightgreen\"\r\n        } else if (currentRoster.Total.includes(player) && player.id !== currentSelected) {\r\n            return contentType === \"text\" ? <div id=\"addedGraphic\">Already in roster</div> : \"#FFFFBA\"\r\n        } else {\r\n            return contentType === \"text\" ? <div>{player.position} {player.team}</div> : ''\r\n        }\r\n    }\r\n\r\n    /*\r\n    old \r\n    style={{\"backgroundColor\": player.id === currentSelected ? \"lightgreen\" : \r\n                        currentRoster.Total.includes(player) ? \"#FFFFBA\" :\r\n                        '' }}\r\n    {player.id === currentSelected ? <div id=\"addedGraphic\">Added to roster!</div> : \r\n                                currentRoster.Total.includes(player) ? <div>Already in roster</div> : <div>{player.position} {player.team}</div>}\r\n    \r\n    */\r\n\r\n    const renderPlayerCard = (player, location=\"mainSearch\") => {\r\n        if (location===\"mainSearch\") {\r\n            return (\r\n                <div>\r\n                    <div className=\"playerSearchProfile\"\r\n                        style={{\"backgroundColor\": renderCardContent(player, \"color\")}}\r\n                        onClick={e => {\r\n                            if (currentRoster.Total.includes(player)) {\r\n                                return}\r\n                            modifyRoster(player, 'add')\r\n                            setCurrentSelected(player.id)\r\n                            }}\r\n                        //only for desktop\r\n                        onMouseEnter={e => window.screen.width > 400 ? e.currentTarget.style.backgroundColor = \"gainsboro\" : ''}\r\n                        onMouseLeave={e => player.id !== currentSelected ? e.currentTarget.style.backgroundColor = \"\" : \"lightgreen\"}\r\n                        >\r\n                        <div>\r\n                            <img\r\n                            className='ui image tiny' \r\n                            src={player.profileImg}/>\r\n                        </div>\r\n                        <div className=\"content\">\r\n                            <div className=\"header\">\r\n                                <b>{player.displayName}</b>\r\n                            </div>\r\n                            <div className=\"description\">\r\n                                {renderCardContent(player, \"text\")}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )   \r\n        } else {\r\n            return (\r\n                <div className=\"ui segment raised\"\r\n                onMouseEnter={e => window.screen.width > 400 ? e.currentTarget.style.backgroundColor = \"gainsboro\" : ''}\r\n                    onMouseLeave={e => e.currentTarget.style.backgroundColor = \"\"}\r\n                    >\r\n                    <div style={{\"display\": \"flex\"}}>\r\n                        <img\r\n                        className='ui image tiny' \r\n                        src={player.profileImg}/>\r\n                        <i className=\"times icon large\"\r\n                            onClick={() => {\r\n                                modifyRoster(player, 'delete')\r\n                                setCurrentSelected('')\r\n                            }}>\r\n                        </i>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <div className=\"header\">\r\n                            {player.displayName}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )  \r\n\r\n        }\r\n    }\r\n    const renderLoadingGraphic = () => {\r\n        return (\r\n            <div className=\"loadingContainer\">\r\n                <img src={LoadingSpinner}/>\r\n                <h3>Loading</h3>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n    const resetQuestion = () => {\r\n        return (\r\n            <Modal\r\n                open={showResetConfirm}\r\n                onClose={() => {\r\n                    setShowResetConfirm(false)\r\n                }}\r\n            >\r\n                <Modal.Header>\r\n                    Reset Confirm\r\n                    <i className=\"times icon\"\r\n                        onClick={() => setShowResetConfirm(false)}\r\n                    ></i>\r\n                </Modal.Header>\r\n                <Modal.Description\r\n                id=\"resetConfirmDescription\">\r\n                    <p>Are you sure you want to delete your added details?</p>\r\n                </Modal.Description>\r\n                <Modal.Actions>\r\n                    <button className=\"ui positive button medium\"\r\n                        onClick={() => {\r\n                                if (startPage) {\r\n                                    setStartPage(false)\r\n                                } else {\r\n                                setAddedPlayerDetails(addedPlayerDetailsStart)\r\n                                setRosterDetails(rosterDetailsStart)\r\n                                setCurrentRoster(currentRosterStart)\r\n                                setShowResetConfirm(false)\r\n                                }\r\n                        }}\r\n                        >Yes</button>\r\n                    <button className=\"ui negative button medium\"\r\n                        onClick={() => \r\n                            setShowResetConfirm(false)}\r\n                    >No</button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    const sidebarMenu = () => {\r\n    \r\n        return (\r\n          <div>\r\n              <div id=\"sidebarIcon\">\r\n                  <i className=\"bars icon large\"\r\n                  onClick={() => setShowMenu(!showMenu)}></i>\r\n              </div>\r\n              <div\r\n                className ={showMenu ? \"visibleSidebar\" : \"hiddenSidebar\"}\r\n                >\r\n                <p onClick={() => {\r\n                    setShowMenu(!showMenu)\r\n                    startPage ? setStartPage(false) : setShowResetConfirm(true)\r\n                }}\r\n                >\r\n                   <i className=\"icon football ball\"></i>Create New\r\n                </p>\r\n                <p\r\n                    onClick={() => {\r\n                        setShowMenu(!showMenu)\r\n                        setHasError(false)\r\n                        setFindRoster({...findRoster, showForm: true})}}\r\n                >\r\n                    <i className=\"icon football ball\"></i>Edit Existing\r\n                </p>\r\n                {renderAboutModal()}\r\n              </div>\r\n          </div>\r\n        )\r\n      }\r\n\r\n    const renderPlayerList = () => {\r\n\r\n        if (noResults.search) {\r\n            return (\r\n                <div>\r\n                    No matching results for {noResults.query}\r\n                </div>\r\n            )\r\n        }\r\n        if (filteredPlayerList.length === 0) {\r\n            return (\r\n                <div>\r\n                    <div className=\"ui items\">\r\n                        {fullPlayerList.map((player, index) => {\r\n                            if (index < 100)\r\n                                return renderPlayerCard(player)\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <div className=\"ui items\">\r\n                        {filteredPlayerList.map((player, index) => {\r\n                            return renderPlayerCard(player)\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const renderRoster = () => {\r\n        return (\r\n            allPositions.map((pos) => {\r\n                return ( \r\n                    <div className=\"rosterDisplayContainer\">\r\n                        <div className=\"currentRosterDisplay\"\r\n                        id=\"positionCounter\"\r\n                        style={{\"backgroundColor\": addedPlayerDetails[`${pos}`] === parseInt(rosterDetails[`${pos}`]) ? \"#dfd\" : \"white\"}}\r\n                        >\r\n                                <h2>{pos}<i className=\"check circle icon green\"\r\n                                style={{\"display\": addedPlayerDetails[`${pos}`] === parseInt(rosterDetails[`${pos}`]) ? \"inline-block\" : \"none\"}}\r\n                                    ></i></h2>\r\n                                <p>{addedPlayerDetails[`${pos}`]} of {rosterDetails[`${pos}`]} added</p>\r\n                                 \r\n                        </div>\r\n                        <div className=\"currentRosterDisplay\">\r\n                        {currentRoster[`${pos}`].map((player) => {\r\n                            return (\r\n                                <div className=\"ui item tiny\">\r\n                                {renderPlayerCard(player, \"sideBar\")}\r\n                                </div>\r\n                            )\r\n                        })}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        )\r\n   \r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {startPage ? '' : sidebarMenu()}\r\n            {resetQuestion()}\r\n            {renderLookupForm()}\r\n            <div className=\"nav\">\r\n                <h1>FFLR</h1>\r\n            </div>\r\n            <div className=\"ui text container raised segment\"\r\n            onClick={() => setShowMenu(false)}>\r\n                { startPage ? showStartPage() : \r\n                <div className=\"ui two column grid stackable\"\r\n                    id=\"playerSearch\">\r\n                    <div className=\"column nine wide fullList\">\r\n                        <div>   \r\n                            <div>\r\n                                <h2\r\n                                style={{\"marginBottom\": \"1vh\", \"textAlign\": \"center\"}}\r\n                                >Build/Edit Roster</h2>\r\n                                {allPositions.every(pos => parseInt(rosterDetails[`${pos}`]) === addedPlayerDetails[`${pos}`]) ? \r\n                                <div className=\"ui raised segment\" id=\"successIndicator\">\r\n                                    <h2>All positions filled!<i className=\"check circle icon green large\"></i></h2>\r\n                                   {renderSMSForm()}\r\n                                </div> : \r\n                                '' }\r\n                            </div>\r\n                                {renderInputForm()}\r\n                                <div id=\"playerListHeader\">\r\n                                    <h3>All Players</h3>\r\n                                    {renderFilter()}\r\n                                </div>\r\n                                {loading ? renderLoadingGraphic() : hasError ? renderErrorMessage() : renderPlayerList()}\r\n                        </div>\r\n                        <div id=\"listSpacer\" style={{\"display\": hasError ? \"none\" : \"block\"}}>\r\n                            {loading ? '' : <p>Click on a player to add</p>}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column seven wide\">\r\n                        <div id=\"searchOptions\">\r\n                            <div><h3>{currentRoster.name}</h3></div>\r\n                            <div>{renderRosterSelect()}</div>\r\n                            <div>{addedPlayerDetails.Total} of {rosterDetails.Total} added</div>\r\n                            {window.screen.width < 400 && \r\n                                allPositions.every(pos => parseInt(rosterDetails[`${pos}`]) === addedPlayerDetails[`${pos}`]) \r\n                                ? <button className=\"ui small button positive\"\r\n                                        onClick={() => {setSMSDetails({...SMSDetails, showForm: true})}}>\r\n                                            Set up reminder </button> : ''}\r\n                        </div>\r\n                        <div id=\"rosterPositionContainer\">\r\n                            {renderRoster()}\r\n                        </div>\r\n                    </div>\r\n                </div> }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}