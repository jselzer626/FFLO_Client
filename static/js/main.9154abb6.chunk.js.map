{"version":3,"sources":["images/Loading_Spinner.gif","images/field.jpg","App.js","index.js"],"names":["module","exports","details","leagueTypes","flexPositions","allPositions","App","useState","fullPlayerList","setFullPlayerList","showRosterSelect","setShowRosterSelect","filteredPlayerList","setFilteredPlayerList","search","query","noResults","setNoResults","RB","QB","WR","TE","FLEX","K","DEF","Total","Bench","currentRoster","setCurrentRoster","type","rosterDetails","setRosterDetails","addedPlayerDetails","setAddedPlayerDetails","loading","setLoading","setHasError","startPage","setStartPage","useEffect","fetch","then","res","a","json","playerList","sort","playerA","playerB","standardRanking","catch","e","handleInputChange","newList","filter","player","this","count","displayName","toLowerCase","includes","currentTarget","value","length","modifyRoster","currentPlayer","action","newRoster","newDetails","push","rankingType","forEach","position","renderPlayerCard","location","className","onClick","onMouseEnter","window","screen","width","style","backgroundColor","onMouseLeave","src","profileImg","team","id","placeholder","onChange","Dropdown","text","icon","Menu","scrolling","map","pos","Item","key","index","LoadingSpinner","Modal","onClose","onOpen","open","trigger","Header","Content","Description","detail","leagueType","parseInt","Actions","Button","positive","massive","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9154abb6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Loading_Spinner.79afee20.gif\";","module.exports = __webpack_public_path__ + \"static/media/field.9fcf0c07.jpg\";","import React, { useState, useEffect } from 'react'\r\nimport LoadingSpinner from './images/Loading_Spinner.gif'\r\nimport fieldImg from './images/field.jpg'\r\nimport { Modal, Button, Dropdown } from 'semantic-ui-react'\r\nimport { render } from 'react-dom'\r\n\r\nconst details = ['type', 'RB', 'QB', 'WR', 'TE', 'FLEX', 'K', 'DEF', 'Total', 'Bench']\r\nconst leagueTypes = [\"Standard\", \"PPR\"]\r\nconst flexPositions = [\"WR\", \"TE\", \"RB\"]\r\nconst allPositions = ['QB', 'WR', 'RB', 'TE', 'FLEX', 'K', 'DEF', 'Bench']\r\nconst specialDetails = ['type', 'Total', 'Bench']\r\n\r\nfunction App() {\r\n\r\n    const [fullPlayerList, setFullPlayerList] = useState([])\r\n    const [showRosterSelect, setShowRosterSelect] = useState(false)\r\n    const [filteredPlayerList, setFilteredPlayerList] = useState([])\r\n    const [noResults, setNoResults] = useState({search: false, query: ''})\r\n    const [currentRoster, setCurrentRoster] = useState({RB: [], QB: [], WR: [], TE: [], FLEX: [], K: [], DEF: [], Total: [], Bench: []})\r\n    const [rosterDetails, setRosterDetails] = useState({type: 'Standard', QB: 1, RB: 2, WR: 2, TE: 1, FLEX: 2, DEF: 1, K: 1, Total: 15, Bench: 5})\r\n    const [addedPlayerDetails, setAddedPlayerDetails] = useState({QB: 0, RB: 0, WR: 0, TE: 0, FLEX: 0, DEF: 0, K: 0, Total: 0, Bench: 0})\r\n    const [loading, setLoading] = useState(false)\r\n    const [hasError, setHasError] = useState(false)\r\n    const [startPage, setStartPage] = useState(true)\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        fetch('https://fflo-server.herokuapp.com/players/loadInitial').then(\r\n            async(res) => {\r\n                let playerList = await res.json()\r\n\r\n                playerList.sort((playerA, playerB) => {\r\n                    return playerA.standardRanking - playerB.standardRanking\r\n                })\r\n\r\n                setFullPlayerList(playerList)\r\n                setLoading(false)\r\n            }\r\n        ).catch(e => {\r\n            setHasError(true)\r\n            setLoading(false)\r\n        })\r\n\r\n    }, [])\r\n\r\n    const handleInputChange = e => {\r\n        setNoResults({...noResults, search: false})\r\n        let newList = fullPlayerList.filter(function(player) {\r\n            if (this.count < 10 && player.displayName.toLowerCase().includes\r\n                (e.currentTarget.value.toLowerCase()))\r\n                {this.count ++\r\n                return true}\r\n        }, {count: 0})\r\n        if (newList.length === 0) {\r\n            setNoResults({...noResults, search: true, query: e.currentTarget.value})\r\n        }\r\n        setFilteredPlayerList(newList)\r\n    }\r\n    \r\n    const renderInputForm = () => {\r\n        return (\r\n            <div className = \"ui form\">\r\n                <input className = \"ui input\"\r\n                    placeholder=\"Begin typing a player name\"\r\n                    type=\"text\"\r\n                    onChange={handleInputChange}\r\n                >\r\n                </input>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const showStartPage = () => {\r\n        return (\r\n            <div className=\"startMenu\">\r\n                <div>\r\n                        <button className=\"large fluid ui button basic\"\r\n                            onClick={() => setStartPage(false)}\r\n                        >Retrieve Existing Lineup\r\n                        </button>   \r\n                    </div>\r\n                    <div>\r\n                        <button className=\"large fluid ui button primary\"\r\n                            onClick={() => setStartPage(false)}\r\n                        >Create New Lineup\r\n                        </button>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderRosterSelect = () => {\r\n\r\n        return (\r\n            <Modal\r\n              onClose={() => setShowRosterSelect(false)}\r\n              onOpen={() => setShowRosterSelect(true)}\r\n              open={showRosterSelect}\r\n              trigger={<p id=\"parametersChange\">Parameters<i className=\"settings icon\"></i></p>}\r\n              //trigger={<Button primary small>Edit</Button>}\r\n            >\r\n              <Modal.Header>Roster Details</Modal.Header>\r\n              <Modal.Content>\r\n                <Modal.Description>\r\n                    <div className=\"ui form two column grid\">\r\n                        {details.map(detail => {\r\n                        if (detail === \"type\") {\r\n                            return (\r\n                                <div className=\"row\">\r\n                                    <div className=\"column four wide\">\r\n                                        {detail}\r\n                                    </div>\r\n                                    <div className=\"column twelve wide\">\r\n                                    {leagueTypes.map(leagueType => {\r\n                                        return (\r\n                                            <button className=\"ui button small blue\"\r\n                                            onClick = {() => \r\n                                                {let newDetails = {...rosterDetails, type: leagueType}\r\n                                                setRosterDetails(newDetails)}\r\n                                            }>{leagueType}</button>\r\n                                        )\r\n                                    })}\r\n                                    </div>\r\n\r\n                                </div>\r\n                            )\r\n                        }\r\n                        return (\r\n                            <div className=\"row\">\r\n                                <div className=\"column four wide\">\r\n                                    {detail}\r\n                                </div>\r\n                                <div className=\"column twelve wide\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={rosterDetails[`${detail}`]}\r\n                                        onChange={(e) => {\r\n                                            let newDetails = {...rosterDetails, [detail]: parseInt(e.currentTarget.value)||''}\r\n                                            setRosterDetails(newDetails)\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    </div>\r\n                </Modal.Description>\r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <Button onClick={() => setShowRosterSelect(false)} positive massive>\r\n                  Save Details\r\n                </Button>\r\n              </Modal.Actions>\r\n            </Modal>\r\n          )\r\n\r\n\r\n    }\r\n\r\n    const renderFilter = () => {\r\n        return (\r\n            <Dropdown\r\n                text=\"Filter\"\r\n                icon=\"filter\"\r\n                className=\"icon\"\r\n            >\r\n                <Dropdown.Menu>\r\n                    <Dropdown.Menu scrolling>\r\n                        {allPositions.map((pos) => {\r\n                            if (pos !== \"Bench\") {\r\n                                return (\r\n                                    <Dropdown.Item\r\n                                        key={pos}\r\n                                        text={pos}\r\n                                        onClick={() => {\r\n                                            setLoading(true)\r\n                                            if (pos === \"FLEX\") {\r\n                                                setFilteredPlayerList(fullPlayerList.filter((player) => flexPositions.includes(player.position)).filter((player, index) => index < 100))\r\n                                            } else {\r\n                                                setFilteredPlayerList(fullPlayerList.filter((player) => player.position === pos).filter((player, index) => index < 100))\r\n                                            }\r\n                                            setLoading(false)\r\n                                        }}\r\n                                />\r\n                                )\r\n                            }\r\n                        })}\r\n                    </Dropdown.Menu>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        )\r\n\r\n    }\r\n    const modifyRoster = (currentPlayer, action) => {\r\n\r\n        //recalculating each time\r\n        //total is the only sublist that gets kept\r\n        let newRoster = {...currentRoster, RB: [], QB: [], WR: [], TE: [], FLEX: [], K: [], DEF: [], Bench: []}\r\n        let newDetails = {QB: 0, RB: 0, WR: 0, TE: 0, FLEX: 0, DEF: 0, K: 0, Total: 0, Bench: 0}\r\n        action === \"add\" ? newRoster.Total.push(currentPlayer) : newRoster.Total = newRoster.Total.filter(player => player !== currentPlayer)\r\n        \r\n        let rankingType = rosterDetails.type === \"Standard\" ? \"standardRanking\" : \"pprRanking\"\r\n        //sort players so highest ranked automatically get sent to starting positions\r\n        newRoster.Total.sort((playerA, playerB) => {return playerA[`${rankingType}`] - playerB[`${rankingType}`]} )\r\n\r\n        newRoster.Total.forEach(player => {\r\n\r\n            if (newDetails[`${player.position}`] >= rosterDetails[`${player.position}`]) {\r\n\r\n                if (flexPositions.includes(player.position) && newDetails.FLEX < rosterDetails.FLEX){\r\n                    newRoster.FLEX.push(player)\r\n                    newDetails.FLEX++\r\n                } else {\r\n                    newRoster.Bench.push(player)\r\n                    newDetails.Bench++\r\n                }\r\n            } else {\r\n                newRoster[`${player.position}`].push(player)\r\n                newDetails[`${player.position}`]++\r\n            }\r\n                newDetails.Total++\r\n            \r\n        })\r\n\r\n        setCurrentRoster(newRoster)\r\n        setAddedPlayerDetails(newDetails)\r\n\r\n    }\r\n\r\n    const renderPlayerCard = (player, location=\"mainSearch\") => {\r\n        if (location===\"mainSearch\") {\r\n            return (\r\n                <div className=\"playerSearchProfile\"\r\n                    onClick={() => {\r\n                        if (currentRoster.Total.includes(player)) {\r\n                            return}\r\n                        modifyRoster(player, 'add')}}\r\n                    //only for desktop\r\n                    onMouseEnter={e => window.screen.width > 400 ? e.currentTarget.style.backgroundColor = \"gainsboro\" : ''}\r\n                    onMouseLeave={e => e.currentTarget.style.backgroundColor = \"\"}\r\n                    >\r\n                    <div>\r\n                        <img\r\n                        className='ui image tiny' \r\n                        src={player.profileImg}/>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <div className=\"header\">\r\n                            <b>{player.displayName}</b>\r\n                        </div>\r\n                        <div className=\"description\">\r\n                            {player.position} {player.team}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )   \r\n        } else {\r\n            return (\r\n                <div className=\"ui segment raised\"\r\n                    onMouseEnter={e => e.currentTarget.style.backgroundColor = \"gainsboro\"}\r\n                    onMouseLeave={e => e.currentTarget.style.backgroundColor = \"\"}\r\n                    >\r\n                    <div style={{\"display\": \"flex\"}}>\r\n                        <img\r\n                        className='ui image tiny' \r\n                        src={player.profileImg}/>\r\n                        <i className=\"times icon large\"\r\n                            onClick={() => {\r\n                                modifyRoster(player, 'delete')\r\n                            }}>\r\n                        </i>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <div className=\"header\">\r\n                            {player.displayName}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )  \r\n\r\n        }\r\n    }\r\n    const renderLoadingGraphic = () => {\r\n        return (\r\n            <div className=\"loadingContainer\">\r\n                <img src={LoadingSpinner}/>\r\n                <h3>Loading Player List</h3>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderPlayerList = () => {\r\n\r\n        if (noResults.search) {\r\n            return (\r\n                <div>\r\n                    No matching results for {noResults.query}\r\n                </div>\r\n            )\r\n        }\r\n        if (filteredPlayerList.length === 0) {\r\n            return (\r\n                <div>\r\n                    <div className=\"ui items\">\r\n                        {fullPlayerList.map((player, index) => {\r\n                            if (index < 100)\r\n                                return renderPlayerCard(player)\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <div className=\"ui items\">\r\n                        {filteredPlayerList.map((player, index) => {\r\n                            return renderPlayerCard(player)\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const renderRoster = () => {\r\n        return (\r\n            /*OLD\r\n            <p>{addedPlayerDetails[`${pos}`] >= rosterDetails[`${pos}`] ? \r\n                                rosterDetails[`${pos}`] : addedPlayerDetails[`${pos}`]} of {rosterDetails[`${pos}`]} added</p>\r\n            */\r\n\r\n            allPositions.map((pos) => {\r\n                return ( \r\n                    <div className=\"rosterDisplayContainer\">\r\n                        <div className=\"currentRosterDisplay\"\r\n                        id=\"positionCounter\">\r\n                                <h2>{pos}<i className=\"check circle icon green\"\r\n                                style={{\"display\": addedPlayerDetails[`${pos}`] === rosterDetails[`${pos}`] ? \"inline-block\" : \"none\"}}\r\n                                    ></i></h2>\r\n                                <p>{addedPlayerDetails[`${pos}`]} of {rosterDetails[`${pos}`]} added</p>\r\n                                 \r\n                        </div>\r\n                        <div className=\"currentRosterDisplay\">\r\n                        {currentRoster[`${pos}`].map((player) => {\r\n                            return (\r\n                                <div className=\"ui item tiny\">\r\n                                {renderPlayerCard(player, \"sideBar\")}\r\n                                </div>\r\n                            )\r\n                        })}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n\r\n\r\n        )\r\n   \r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"ui text container raised segment\">\r\n                { startPage ? showStartPage() : \r\n                <div className=\"ui two column grid stackable\"\r\n                    id=\"playerSearch\">\r\n                    <div className=\"column ten wide fullList\">\r\n                        <div>   \r\n                                <h3\r\n                                style={{\"marginBottom\": \"1vh\", \"textAlign\": \"center\"}}\r\n                                >Build/Edit Roster</h3>\r\n                                {renderInputForm()}\r\n                                <div id=\"searchOptions\">\r\n                                    <h3>All Players</h3>\r\n                                    {renderFilter()}\r\n                                </div>\r\n                                {loading ? renderLoadingGraphic() : renderPlayerList()}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column six wide\">\r\n                        <div id=\"searchOptions\">\r\n                            <h3>My Team:</h3>\r\n                            {renderRosterSelect()}\r\n                        </div>\r\n                        <div id=\"rosterPositionContainer\">\r\n                            {renderRoster()}\r\n                        </div>\r\n                    </div>\r\n                </div> }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div className=\"nav\">\r\n    <h1>FFLO</h1>\r\n    </div>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}